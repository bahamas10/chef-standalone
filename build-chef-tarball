#!/usr/bin/env bash
#
# build a standalone chef installation on SmartOS -
# useful while omnibus is broken for this OS
#
# Author: Dave Eddy <dave@daveeddy.com>
# Contributor: Brian Bennett <brian.bennett@joyent.com>
# Date: March 30, 2015
# License: MIT

usage() {
	local prog=${0##*/}
	cat <<-EOF
	usage: $prog [-v chef_version] [-r ruby_url] [-d cache_dir] [-h] [tarball_name.tar.gz]

	build a standalone chef tarball on SmartOS

	options
	  -c <chef_dir>         the dir to use for install chef, defaults to $chef_dir
	  -d <cache_dir>        the dir to use for caching ruby tarballs, defaults to $cache_dir
	  -f                    wipe out $chef_dir before building
	  -g                    fully independent build for global zone
	  -h                    print this message and exit
	  -j <jobs>             number of jobs, will be passed as make -j <jobs>, defaults to $jobs
	  -r <ruby_url>         the url of the ruby tarball to use, defaults to $ruby_url
	  -t <tar>              tar executable name, defaults to $tar
	  -v <chef_versio>      the chef version to install, defaults to $chef_version
	EOF
}

# make a path absolute against the PWD
resolve() {
	local path=$1
	if [[ ${path:0:1} != '/' ]]; then
		path=$PWD/$path
	fi
	echo "$path"
}

tar='tar'
gtar --help &>/dev/null && tar='gtar'
cache_dir=~/.chef-standalone
chef_dir='/opt/chef'
chef_version='12.4.1'
force=false
gz=false
jobs=4
ruby_configure_opts=()
ruby_url='http://cache.ruby-lang.org/pub/ruby/2.2/ruby-2.2.2.tar.gz'
while getopts 'c:d:fghj:r:t:v:' option; do
	case "$option" in
		c) chef_dir=$OPTARG;;
		d) cache_dir=$OPTARG;;
		f) force=true;;
		g) gz=true;;
		h) usage; exit 0;;
		j) jobs=$OPTARG;;
		r) ruby_url=$OPTARG;;
		t) tar=$OPTARG;;
		v) chef_version=$OPTARG;;
		*) usage >&2; exit 1;;
	esac
done
shift "$((OPTIND - 1))"
tarball=$1

# bail if the user didn't supply a tarball name
if [[ -n $tarball ]]; then
	tarball=$(resolve "$tarball")
else
	echo 'WARN: no tarball specified - tar creation will be skipped' >&2
fi

# bail if $chef_dir exists
chef_dir=$(resolve "$chef_dir")
if ! $force && [[ -d $chef_dir ]]; then
	echo "$chef_dir exists... cowardly refusing to run" >&2
	exit 1
fi
rm -rf "$chef_dir"

cache_dir=$(resolve "$cache_dir")
mkdir -p "$cache_dir"
ruby_file=$cache_dir/${ruby_url##*/}

# tmp workspace
tmp=$(mktemp -d /var/tmp/ruby-standalone.XXXXXXXX)

cat <<-EOF
cache_dir: $cache_dir
chef_dir: $chef_dir
chef_version: $chef_version
global_zone: $gz
jobs: $jobs
ruby_file: $ruby_file
ruby_url: $ruby_url
tar: $tar
tarball: ${tarball:-<none>}
tmp: $tmp
EOF

# download the ruby tarball
if [[ -f $ruby_file ]]; then
	echo "$ruby_file exists... using cached version"
else
	echo "downloading $ruby_url to $ruby_file..."
	curl -o "$ruby_file" "$ruby_url" || exit 1
fi

cd "$tmp" || exit 1

# If we're building for the global zone, relocate GCC libraries to remove
# /opt/local dependencies
if $gz; then
	crle -64 -u -a /opt/local/gcc47/x86_64-sun-solaris2.11/lib/amd64/libssp.so.0 -o /usr/lib/amd64/libssp.so.0 -c ./ld.config
	crle -64 -u -a /opt/local/gcc47/x86_64-sun-solaris2.11/lib/amd64/libgcc_s.so.1 -o /usr/lib/amd64/libgcc_s.so.1 -c ./ld.config
	export LD_CONFIG=$PWD/ld.config
fi

# install ruby
mkdir ruby
"$tar" -xzf "$ruby_file" -C ruby --strip-components=1
cd ruby || exit 1

# figure out options to give ./cnofigure
# all OS
ruby_configure_opts+=(
	--without-gmp
	--disable-install-doc
	"--prefix=$chef_dir"
)
# specific OS
case "$(uname)" in
	SunOS)
		ruby_configure_opts+=(
			--with-opt-dir=/opt/local
			--enable-shared
			ac_cv_func_dl_iterate_phdr=no
			CFLAGS='-R -fPIC'
		)
		;;
	*)
		ruby_configure_opts+=(
			--disable-dtrace
		)
		;;
esac

./configure "${ruby_configure_opts[@]}"

make -j "$jobs"
mkdir "$chef_dir"
make install || exit 1
echo 'ruby installed'

cd "$tmp" || exit 1

"$chef_dir/bin/ruby" -v || exit 1 # sanity check

# install chef
if ! "$chef_dir/bin/gem" install --no-ri --no-rdoc chef -v "$chef_version"; then
	# FAIL! now we fix ffi
	curl -L -o ffi.patch https://patch-diff.githubusercontent.com/raw/ffi/ffi/pull/399.diff || exit 1
	"$chef_dir/bin/gem" install gem-patch
	"$chef_dir/bin/gem" patch "$chef_dir"/lib/ruby/gems/*/cache/ffi-*.gem ./ffi.patch -p 1

	# retry chef install, this time it should work
	"$chef_dir/bin/gem" install --no-ri --no-rdoc chef -v "$chef_version" || exit 1
fi

# print what was installed
"$chef_dir/bin/ruby" -v
"$chef_dir/bin/chef-solo" -v || exit 1 # sanity

file "$chef_dir/bin/ruby"
echo
echo "finished! chef installed to $chef_dir"
echo

# remove tmp dir
cd /tmp
rm -rf "$tmp"

# tar it up
if [[ -n $tarball ]]; then
	# tar up the result
	"$tar" -czf "$tarball" "$chef_dir" || exit 1
	echo "tarball written to $tarball"
fi

true
